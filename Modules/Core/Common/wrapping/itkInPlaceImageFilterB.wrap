#----
#
# NOTE: Since an InPlaceImageFilter reuses the input bulk data memory for the
# output bulk data memory, the input image type must match the output image type.
#
# If the input and output image types are not identical, the filter reverts to a
# traditional ImageToImageFilter behaviour where an output image is allocated.
#
# Any filter instantiatiated by InPlaceImageToImageFilter, but also be instantiated
# by the ImageToImageFilter
#
#----
itk_wrap_class("itk::InPlaceImageFilter" POINTER)

  # complex types
  itk_wrap_image_filter("${WRAP_ITK_COMPLEX_REAL}" 2)

  # VectorImage <-> scalar
  UNIQUE(to_types "UC;${WRAP_ITK_SCALAR}")
  foreach(d ${ITK_WRAP_IMAGE_DIMS})
    foreach(t ${to_types})
      itk_wrap_template("${ITKM_VI${t}${d}}${ITKM_I${t}${d}}" "${ITKT_VI${t}${d}},${ITKT_I${t}${d}}")
      itk_wrap_template("${ITKM_I${t}${d}}${ITKM_VI${t}${d}}" "${ITKT_I${t}${d}},${ITKT_VI${t}${d}}")
    endforeach()
  endforeach()

  # *Vector <-> scalar
  itk_wrap_image_filter_combinations("${WRAP_ITK_VECTOR}" "${WRAP_ITK_SCALAR}")
  itk_wrap_image_filter_combinations("${WRAP_ITK_SCALAR}" "${WRAP_ITK_VECTOR}")

  # scalar <-> RGB
  UNIQUE(stypes "${ITKM_IT};UL;${WRAP_ITK_SCALAR}")
  itk_wrap_image_filter_combinations("${stypes}" "${WRAP_ITK_RGB}")
  itk_wrap_image_filter_combinations("${WRAP_ITK_RGB}" "${stypes}")

  # scalar <-> RGBA
  UNIQUE(stypes "${ITKM_IT};UL;${WRAP_ITK_SCALAR}")
  itk_wrap_image_filter_combinations("${stypes}" "${WRAP_ITK_RGBA}")
  itk_wrap_image_filter_combinations("${WRAP_ITK_RGBA}" "${stypes}")


  # complex <-> scalar
  itk_wrap_image_filter_combinations("${WRAP_ITK_SCALAR}" "${WRAP_ITK_COMPLEX_REAL}")
  itk_wrap_image_filter_combinations("${WRAP_ITK_COMPLEX_REAL}" "${WRAP_ITK_SCALAR}")

  # complex types
  itk_wrap_image_filter_combinations("${WRAP_ITK_COMPLEX_REAL}" "${WRAP_ITK_COMPLEX_REAL}")

  # Wrap dim=3 -> dim=2, dim=3 -> dim=2, etc.
  foreach(d ${ITK_WRAP_IMAGE_DIMS})
    foreach(d2 ${ITK_WRAP_IMAGE_DIMS})
      if(NOT "${d}" EQUAL "${d2}") # this was already taken care of elsewhere
        foreach(t ${WRAP_ITK_SCALAR} ${WRAP_ITK_RGB} ${WRAP_ITK_COMPLEX_REAL})
          itk_wrap_template("${ITKM_I${t}${d}}${ITKM_I${t}${d2}}"
            "${ITKT_I${t}${d}},${ITKT_I${t}${d2}}")
        endforeach()
      endif()
    endforeach()
  endforeach()

itk_end_wrap_class()
